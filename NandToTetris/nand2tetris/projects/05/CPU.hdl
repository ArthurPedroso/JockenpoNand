// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=wIBitNot);
    Mux16(a=false, b=instruction, sel=instruction[15],
    out[0]=wInstruction0,
    out[1]=wInstruction1,
    out[2]=wInstruction2,
    out[3]=writeM,//wInstruction3
    out[4]=wInstruction4,
    out[5]=wInstruction5,
    out[6]=wInstruction6,
    out[7]=wInstruction7,
    out[8]=wInstruction8,
    out[9]=wInstruction9,
    out[10]=wInstruction10,
    out[11]=wInstruction11,
    out[12]=wInstruction12);
    Mux16(a=wAluOut, b=instruction, sel=wIBitNot, out=wARegisterIn);

    Or(a=wInstruction5, b=wIBitNot, out=wARegisterLoad);
    ARegister(in=wARegisterIn, load=wARegisterLoad, out=wARegisterOut, out[0..14]=addressM); //RegisA
    DRegister(in=wAluOut, load=wInstruction4, out=wAluX); //RegisD

    Mux16(a=wARegisterOut, b=inM, sel=wInstruction12, out=wAluY);

    ALU(x=wAluX, y=wAluY, zx=wInstruction11, nx=wInstruction10, zy=wInstruction9, ny=wInstruction8, f=wInstruction7, no=wInstruction6, out=wAluOut, out=outM, zr=wAluZr, ng=wAluNg);

    Or(a=wAluZr, b=wAluNg, out=wOrOut1);
    Not(in=wOrOut1, out=wNotOut1);
    And(a=wAluNg, b=wInstruction2, out=wJmpOut1); //Jmp1
    And(a=wAluZr, b=wInstruction1, out=wJmpOut2); //Jmp2
    And(a=wNotOut1, b=wInstruction0, out=wJmpOut3); //Jmp3
    Or(a=wJmpOut1, b=wJmpOut2, out=wOrOut2);
    Or(a=wOrOut2, b=wJmpOut3, out=wPCounterLoad);
    Not(in=wPCounterLoad, out=wPCounterInc);
    PC(in=wARegisterOut, load=wPCounterLoad, inc=wPCounterInc, reset=reset, out[0..14]=pc);
    // Put your code here:
}
